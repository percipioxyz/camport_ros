#! /usr/bin/env python

PACKAGE='openni2_camera'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("laser_power", int_t, 0, "laser power", 100, 0, 100);

gen.add("auto_exposure", bool_t, 0, "Auto-Exposure", True)
gen.add("auto_white_balance", bool_t, 0, "Auto-White-Balance", True)

gen.add("rgb_analog_gain", int_t, 0, "rgb camera analog gain", 100, 0, 100);
gen.add("rgb_r_gain", int_t, 0, "rgb camera r gain", 100, 0, 100);
gen.add("rgb_g_gain", int_t, 0, "rgb camera g gain", 100, 0, 100);
gen.add("rgb_b_gain", int_t, 0, "rgb camera b gain", 100, 0, 100);
gen.add("rgb_exposure_time", int_t, 0, "rgb camera exposure time", 100, 0, 100);

gen.add("ir_gain", int_t, 0, "ir camera gain", 100, 0, 100);

# TODO Only offer modes supported by known hardware
output_mode_enum = gen.enum([  gen.const(  "SXGA_30Hz", int_t, 1,  "1280x1024@30Hz"),
                               gen.const(  "SXGA_15Hz", int_t, 2,  "1280x1024@15Hz"),
                               gen.const(   "XGA_30Hz", int_t, 3,  "1280x720@30Hz"),
                               gen.const(   "XGA_15Hz", int_t, 4,  "1280x720@15Hz"),
                               gen.const(   "VGA_30Hz", int_t, 5,  "640x480@30Hz"),
                               gen.const(   "VGA_25Hz", int_t, 6,  "640x480@25Hz"),
                               gen.const(  "QVGA_25Hz", int_t, 7,  "320x240@25Hz"),
                               gen.const(  "QVGA_30Hz", int_t, 8,  "320x240@30Hz"),
                               gen.const(  "QVGA_60Hz", int_t, 9,  "320x240@60Hz"),
                               gen.const( "QQVGA_25Hz", int_t, 10, "160x120@25Hz"),
                               gen.const( "QQVGA_30Hz", int_t, 11, "160x120@30Hz"),
                               gen.const( "QQVGA_60Hz", int_t, 12, "160x120@60Hz"),
                               gen.const(   "VGA_15Hz", int_t, 13, "640x480@15Hz"),
                               gen.const(  "SXGAPONE_30Hz", int_t, 14,  "1280x960@30Hz"),
                               gen.const(  "SXGAPTWO_30Hz", int_t, 15,  "2592x1944@30Hz"),
                               
                               gen.const(  "WXGA_30Hz", int_t, 16,  "1280x800@30Hz"),
                               gen.const(  "WVGA_30Hz", int_t, 17,  "640x400@30Hz"),
                               gen.const(  "WQGA_30Hz", int_t, 18,  "320x200@30Hz"),
                               gen.const(  "FHD_30Hz", int_t, 19,  "1920x1080@30Hz"),
                               gen.const(  "WVGA2_30Hz", int_t, 20,  "640x360@30Hz"),
                               gen.const(  "STREAM_OFF", int_t, 21,  "DISABLE"),],
                               "output mode")

gen.add("size", int_t, 0, "Select from the list", 1, 0, 3, edit_method=output_mode_enum)

gen.add("ir_mode", int_t, 0, "Video mode for IR camera", 5, 1, 15, edit_method = output_mode_enum)
gen.add("color_mode", int_t, 0, "Video mode for color camera", 5, 1, 15, edit_method = output_mode_enum)
gen.add("depth_mode", int_t, 0, "Video mode for depth camera", 5, 1, 15, edit_method = output_mode_enum)

gen.add("depth_registration", bool_t, 0, "Depth data registration", False)
gen.add("color_depth_synchronization", bool_t, 0, "Synchronization of color and depth camera", False)

gen.add("data_skip",  int_t, 0, "Skip N images for every image published (rgb/depth/depth_registered/ir)", 0, 0, 10)

gen.add("ir_time_offset", double_t, 0, "ir image time offset in seconds", -0.033, -1.0, 1.0 );
gen.add("color_time_offset", double_t, 0, "color image time offset in seconds", -0.033, -1.0, 1.0 );
gen.add("depth_time_offset", double_t, 0, "depth image time offset in seconds", -0.033, -1.0, 1.0 );

gen.add("depth_ir_offset_x", double_t, 0, "X offset between IR and depth images", 5.0, -10.0, 10.0)
gen.add("depth_ir_offset_y", double_t, 0, "Y offset between IR and depth images", 4.0, -10.0, 10.0)

gen.add("z_offset_mm", int_t, 0, "Z offset in mm", 0, -200, 200)
gen.add("z_scaling", double_t, 0, "Scaling factor for depth values", 1.0, 0.5, 1.5)

gen.add("use_device_time", bool_t, 0, "Use internal timer of OpenNI device", True)

exit(gen.generate(PACKAGE, "OpenNI2", "OpenNI2"))
  
